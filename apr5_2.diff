diff --git a/source/blender/collada/GeometryExporter.cpp b/source/blender/collada/GeometryExporter.cpp
index 3d5d79f..17afd70 100644
--- a/source/blender/collada/GeometryExporter.cpp
+++ b/source/blender/collada/GeometryExporter.cpp
@@ -70,6 +70,10 @@ void GeometryExporter::exportGeom(Scene *sce)
 
 void GeometryExporter::operator()(Object *ob)
 { 
+	static std::vector<float>	b_x;
+	static std::vector<float>	b_y;
+	static std::vector<float>	b_z;
+	static std::vector<int>		diff;
 	// XXX don't use DerivedMesh, Mesh instead?
 #if 0		
 	DerivedMesh *dm = mesh_get_derived_final(mScene, ob, CD_MASK_BAREMESH);
@@ -105,7 +109,7 @@ void GeometryExporter::operator()(Object *ob)
 	openMesh(geom_id, geom_name);
 	
 	// writes <source> for vertex coords
-	createVertsSource(geom_id, me);
+	createVertsSource(geom_id, me, b_x,b_y, b_z, diff, true);
 	
 	// writes <source> for normal coords
 	createNormalsSource(geom_id, me, nor);
@@ -160,7 +164,7 @@ void GeometryExporter::operator()(Object *ob)
 			kb = kb->next;
 			for (; kb; kb = kb->next) {
 				BKE_key_convert_to_mesh(kb, me);
-				export_key_mesh(ob, me, kb);
+				export_key_mesh(ob, me, kb, b_x, b_y, b_z, diff);
 			}
 		}
 	}
@@ -169,7 +173,7 @@ void GeometryExporter::operator()(Object *ob)
 
 }
 
-void GeometryExporter::export_key_mesh(Object *ob, Mesh *me, KeyBlock *kb)
+void GeometryExporter::export_key_mesh(Object *ob, Mesh *me, KeyBlock *kb, std::vector<float> &b_x, std::vector<float> &b_y, std::vector<float> &b_z,std::vector<int> &diff)
 {
 	std::string geom_id = get_geometry_id(ob, false) + "_morph_" + translate_id(kb->name);
 	std::vector<Normal> nor;
@@ -192,7 +196,7 @@ void GeometryExporter::export_key_mesh(Object *ob, Mesh *me, KeyBlock *kb)
 	openMesh(geom_id, geom_name);
 	
 	// writes <source> for vertex coords
-	createVertsSource(geom_id, me);
+	createVertsSource(geom_id, me, b_x, b_y, b_z, diff);
 	
 	// writes <source> for normal coords
 	createNormalsSource(geom_id, me, nor);
@@ -236,6 +240,10 @@ void GeometryExporter::export_key_mesh(Object *ob, Mesh *me, KeyBlock *kb)
 	}
 
 	closeGeometry();
+	printf("\n++++++++++++++++++\n");
+	for(int i=0; i< diff.size(); i++)	{
+		printf("%d",diff[i]);
+	}
 }
 
 void GeometryExporter::createLooseEdgeList(Object *ob,
@@ -405,7 +413,7 @@ void GeometryExporter::createPolylist(short material_index,
 
 
 // creates <source> for positions
-void GeometryExporter::createVertsSource(std::string geom_id, Mesh *me)
+void GeometryExporter::createVertsSource(std::string geom_id, Mesh *me, std::vector<float> &b_x, std::vector<float> &b_y, std::vector<float> &b_z, std::vector<int> &diff, bool is_basis)
 {
 #if 0
 	int totverts = dm->getNumVerts(dm);
@@ -431,6 +439,17 @@ void GeometryExporter::createVertsSource(std::string geom_id, Mesh *me)
 	int i = 0;
 	for (i = 0; i < totverts; i++) {
 		source.appendValues(verts[i].co[0], verts[i].co[1], verts[i].co[2]);
+		if(is_basis)	{
+			printf("\nPrinting basis list\n");
+			b_x.push_back(verts[i].co[0]);
+			b_z.push_back(verts[i].co[1]);
+			b_y.push_back(verts[i].co[2]);
+		}
+		else	{
+			printf("\n %d\n%f\t%f\t%f\n%f\t%f\t%f\n",i,b_x[i],b_y[i],b_z[i],verts[i].co[0],verts[i].co[1],verts[i].co[2]);
+			diff.push_back(i);
+		}
+		printf("****");
 	}
 	
 	source.finish();
diff --git a/source/blender/collada/GeometryExporter.h b/source/blender/collada/GeometryExporter.h
index 5b67f80..7734992 100644
--- a/source/blender/collada/GeometryExporter.h
+++ b/source/blender/collada/GeometryExporter.h
@@ -84,7 +84,7 @@ public:
 						std::vector<BCPolygonNormalsIndices>& norind);
 	
 	// creates <source> for positions
-	void createVertsSource(std::string geom_id, Mesh *me);
+	void createVertsSource(std::string geom_id, Mesh *me, std::vector<float> &b_x,std::vector<float> &b_y,std::vector<float> &b_z, std::vector<int> &diff, bool is_basis=false);
 
 	void createVertexColorSource(std::string geom_id, Mesh *me);
 
@@ -105,8 +105,9 @@ public:
 
 	COLLADASW::URI makeUrl(std::string id);
 
-	void export_key_mesh(Object *ob, Mesh *me, KeyBlock *kb);
-	
+	void export_key_mesh(Object *ob, Mesh *me, KeyBlock *kb,std::vector<float> &b_x,std::vector<float> &b_y,std::vector<float> &b_z,std::vector<int> &diff);
+
+
 private:
 	std::set<std::string> exportedGeometry;
 	
