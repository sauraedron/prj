diff --git a/source/blender/collada/GeometryExporter.cpp b/source/blender/collada/GeometryExporter.cpp
index 3d5d79f..a1bf157 100644
--- a/source/blender/collada/GeometryExporter.cpp
+++ b/source/blender/collada/GeometryExporter.cpp
@@ -155,12 +155,20 @@ void GeometryExporter::operator()(Object *ob)
 	if (this->export_settings->include_shapekeys) {
 		Key * key = BKE_key_from_object(ob);
 		if (key) {
+			std::vector<int> b_xpos;
+			std::vector<int> b_ypos;
+			std::vector<int> b_zpos;
+
 			KeyBlock * kb = (KeyBlock *)key->block.first;
+			/*Create a basis list */
+			BKE_key_convert_to_mesh(kb, me);
+			create_basis_list(me, b_xpos, b_ypos, b_zpos);
+
 			//skip the basis
 			kb = kb->next;
 			for (; kb; kb = kb->next) {
 				BKE_key_convert_to_mesh(kb, me);
-				export_key_mesh(ob, me, kb);
+				export_key_mesh(ob, me, kb, key, b_xpos, b_ypos, b_zpos);
 			}
 		}
 	}
@@ -169,7 +177,17 @@ void GeometryExporter::operator()(Object *ob)
 
 }
 
-void GeometryExporter::export_key_mesh(Object *ob, Mesh *me, KeyBlock *kb)
+void GeometryExporter::create_basis_list(Mesh *me, std::vector<int> &b_xpos=std::vector<int>(), std::vector<int>  &b_ypos=std::vector<int>(), std::vector<int>  &b_zpos=std::vector<int>())	{
+	MVert *vert = me->mvert;
+	for(int i=0; i<me->totvert; i++)	{
+		b_xpos.push_back(vert[i].co[0]);
+		b_ypos.push_back(vert[i].co[1]);
+		b_zpos.push_back(vert[i].co[2]);
+	}
+
+}
+
+void GeometryExporter::export_key_mesh(Object *ob, Mesh *me, KeyBlock *kb, Key *k, std::vector<int> &b_xpos , std::vector<int> &b_ypos, std::vector<int> &b_zpos)
 {
 	std::string geom_id = get_geometry_id(ob, false) + "_morph_" + translate_id(kb->name);
 	std::vector<Normal> nor;
@@ -192,7 +210,10 @@ void GeometryExporter::export_key_mesh(Object *ob, Mesh *me, KeyBlock *kb)
 	openMesh(geom_id, geom_name);
 	
 	// writes <source> for vertex coords
-	createVertsSource(geom_id, me);
+	if(k == k->block.first)
+		createVertsSource(geom_id, me, true);
+	else
+		createVertsSource(geom_id, me, true);
 	
 	// writes <source> for normal coords
 	createNormalsSource(geom_id, me, nor);
@@ -405,7 +426,7 @@ void GeometryExporter::createPolylist(short material_index,
 
 
 // creates <source> for positions
-void GeometryExporter::createVertsSource(std::string geom_id, Mesh *me)
+void GeometryExporter::createVertsSource(std::string geom_id, Mesh *me, std::vector<int> &b_xpos, std::vector<int> &b_ypos, std::vector<int> &b_zpos, bool is_basis)
 {
 #if 0
 	int totverts = dm->getNumVerts(dm);
@@ -428,9 +449,17 @@ void GeometryExporter::createVertsSource(std::string geom_id, Mesh *me)
 	 * count = ""> */
 	source.prepareToAppendValues();
 	//appends data to <float_array>
+
 	int i = 0;
 	for (i = 0; i < totverts; i++) {
 		source.appendValues(verts[i].co[0], verts[i].co[1], verts[i].co[2]);
+		if(is_basis != true)	{
+
+			if(b_xpos[i]!=verts[i].co[0]||b_ypos[i]!=verts[i].co[1]||b_zpos[i]!=verts[i].co[2])
+				printf("\n%d",i);
+
+
+		}
 	}
 	
 	source.finish();
diff --git a/source/blender/collada/GeometryExporter.h b/source/blender/collada/GeometryExporter.h
index 5b67f80..d76575c 100644
--- a/source/blender/collada/GeometryExporter.h
+++ b/source/blender/collada/GeometryExporter.h
@@ -84,7 +84,7 @@ public:
 						std::vector<BCPolygonNormalsIndices>& norind);
 	
 	// creates <source> for positions
-	void createVertsSource(std::string geom_id, Mesh *me);
+	void createVertsSource(std::string geom_id, Mesh *me,const std::vector<int> &b_xpos=std::vector<int>(), const std::vector<int> &b_ypos=std::vector<int>(), const std::vector<int> &b_zpos=std::vector<int>(), bool is_basis=false);
 
 	void createVertexColorSource(std::string geom_id, Mesh *me);
 
@@ -105,10 +105,14 @@ public:
 
 	COLLADASW::URI makeUrl(std::string id);
 
-	void export_key_mesh(Object *ob, Mesh *me, KeyBlock *kb);
-	
+	void export_key_mesh(Object *ob, Mesh *me, KeyBlock *kb, Key *k, const std::vector<int> &b_xpos=std::vector<int>(), const std::vector<int> &b_ypos=std::vector<int>(), const std::vector<int> &b_zpos=std::vector<int>());
+
+	void create_basis_list(Mesh *me,const std::vector<int> &b_xpos=std::vector<int>(), const std::vector<int> &b_ypos=std::vector<int>(), const std::vector<int> &b_zpos=std::vector<int>());
+
 private:
 	std::set<std::string> exportedGeometry;
+
+
 	
 	const ExportSettings *export_settings;
 
